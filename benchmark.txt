# JMH version: 1.28
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 1 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.timtrense.template.SpeedTest.test_textformat

# Run progress: 0,00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: test_textformat took 710ms
test_textformat took 622ms
0,670 s/op
Iteration   1: test_textformat took 615ms
test_textformat took 560ms
test_textformat took 565ms
test_textformat took 561ms
test_textformat took 564ms
test_textformat took 564ms
test_textformat took 560ms
test_textformat took 563ms
test_textformat took 563ms
0,568 s/op
Iteration   2: test_textformat took 559ms
test_textformat took 554ms
test_textformat took 562ms
test_textformat took 561ms
test_textformat took 562ms
test_textformat took 557ms
test_textformat took 564ms
test_textformat took 561ms
test_textformat took 562ms
0,560 s/op
Iteration   3: test_textformat took 566ms
test_textformat took 560ms
test_textformat took 563ms
test_textformat took 559ms
test_textformat took 560ms
test_textformat took 561ms
test_textformat took 554ms
test_textformat took 564ms
test_textformat took 559ms
0,561 s/op


Result "com.timtrense.template.SpeedTest.test_textformat":
  0,563 ±(99.9%) 0,082 s/op [Average]
  (min, avg, max) = (0,560, 0,563, 0,568), stdev = 0,004
  CI (99.9%): [0,481, 0,645] (assumes normal distribution)


# JMH version: 1.28
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 1 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.timtrense.template.SpeedTest.test_textformat_compiling

# Run progress: 20,00% complete, ETA 00:01:09
# Fork: 1 of 1
# Warmup Iteration   1: test_textformat_compiling took 2331ms
2,366 s/op
Iteration   1: test_textformat_compiling took 2193ms
test_textformat_compiling took 2191ms
test_textformat_compiling took 2181ms
2,189 s/op
Iteration   2: test_textformat_compiling took 2186ms
test_textformat_compiling took 2213ms
test_textformat_compiling took 2207ms
2,202 s/op
Iteration   3: test_textformat_compiling took 2181ms
test_textformat_compiling took 2190ms
test_textformat_compiling took 2186ms
2,186 s/op


Result "com.timtrense.template.SpeedTest.test_textformat_compiling":
  2,192 ±(99.9%) 0,158 s/op [Average]
  (min, avg, max) = (2,186, 2,192, 2,202), stdev = 0,009
  CI (99.9%): [2,035, 2,350] (assumes normal distribution)


# JMH version: 1.28
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 1 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.timtrense.template.SpeedTest.test_textformat_compilingInline

# Run progress: 40,00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: test_textformat_compilingInline took 2724ms
2,730 s/op
Iteration   1: test_textformat_compilingInline took 2493ms
test_textformat_compilingInline took 2532ms
2,513 s/op
Iteration   2: test_textformat_compilingInline took 2538ms
test_textformat_compilingInline took 2556ms
2,547 s/op
Iteration   3: test_textformat_compilingInline took 2531ms
test_textformat_compilingInline took 2508ms
2,520 s/op


Result "com.timtrense.template.SpeedTest.test_textformat_compilingInline":
  2,527 ±(99.9%) 0,332 s/op [Average]
  (min, avg, max) = (2,513, 2,527, 2,547), stdev = 0,018
  CI (99.9%): [2,194, 2,859] (assumes normal distribution)


# JMH version: 1.28
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 1 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.timtrense.template.SpeedTest.test_textformat_precompiled

# Run progress: 60,00% complete, ETA 00:00:39
# Fork: 1 of 1
# Warmup Iteration   1: test_textformat_precompiled took 442ms
test_textformat_precompiled took 310ms
test_textformat_precompiled took 319ms
0,369 s/op
Iteration   1: test_textformat_precompiled took 299ms
test_textformat_precompiled took 308ms
test_textformat_precompiled took 302ms
test_textformat_precompiled took 319ms
test_textformat_precompiled took 304ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 309ms
test_textformat_precompiled took 302ms
test_textformat_precompiled took 304ms
test_textformat_precompiled took 304ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 303ms
test_textformat_precompiled took 295ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 300ms
test_textformat_precompiled took 303ms
0,303 s/op
Iteration   2: test_textformat_precompiled took 297ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 304ms
test_textformat_precompiled took 296ms
test_textformat_precompiled took 293ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 295ms
test_textformat_precompiled took 300ms
test_textformat_precompiled took 302ms
test_textformat_precompiled took 294ms
test_textformat_precompiled took 294ms
test_textformat_precompiled took 296ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 296ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 299ms
0,298 s/op
Iteration   3: test_textformat_precompiled took 300ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 301ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 299ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 296ms
test_textformat_precompiled took 293ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 297ms
test_textformat_precompiled took 298ms
test_textformat_precompiled took 296ms
0,298 s/op


Result "com.timtrense.template.SpeedTest.test_textformat_precompiled":
  0,299 ±(99.9%) 0,053 s/op [Average]
  (min, avg, max) = (0,298, 0,299, 0,303), stdev = 0,003
  CI (99.9%): [0,246, 0,353] (assumes normal distribution)


# JMH version: 1.28
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# Blackhole mode: full + dont-inline hint
# Warmup: 1 iterations, 1 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.timtrense.template.SpeedTest.test_thymeleaf

# Run progress: 80,00% complete, ETA 00:00:19
# Fork: 1 of 1
# Warmup Iteration   1: SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
test_thymeleaf took 5202ms
5,232 s/op
Iteration   1: test_thymeleaf took 4740ms
test_thymeleaf took 4954ms
4,848 s/op
Iteration   2: test_thymeleaf took 4869ms
test_thymeleaf took 4848ms
4,859 s/op
Iteration   3: test_thymeleaf took 4872ms
test_thymeleaf took 4876ms
4,874 s/op


Result "com.timtrense.template.SpeedTest.test_thymeleaf":
  4,860 ±(99.9%) 0,241 s/op [Average]
  (min, avg, max) = (4,848, 4,860, 4,874), stdev = 0,013
  CI (99.9%): [4,619, 5,102] (assumes normal distribution)


# Run complete. Total time: 00:01:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt  Score   Error  Units
SpeedTest.test_textformat                  avgt    3  0,563 ± 0,082   s/op
SpeedTest.test_textformat_compiling        avgt    3  2,192 ± 0,158   s/op
SpeedTest.test_textformat_compilingInline  avgt    3  2,527 ± 0,332   s/op
SpeedTest.test_textformat_precompiled      avgt    3  0,299 ± 0,053   s/op
SpeedTest.test_thymeleaf                   avgt    3  4,860 ± 0,241   s/op

all tests for 5_000_000 template processings
